#!/usr/bin/env zunit

@setup {
  run rbw login $AFTERBUILD_LOGIN $AFTERBUILD_PASSWORD --host $AFTERBUILD_HOST
}

@test 'Command application create (#check name)' {
  run rbw application create "an application" --json
  assert $state equals 0
  NAME=`echo $output | jq '.name' -r`
  assert $NAME is_not_empty
  assert $NAME same_as 'an application'
}

@test 'Command applications (#check total)' {
  run rbw applications --json
  assert $state equals 0
  TOTAL=`echo $output | jq '.total' -r`
  assert $TOTAL is_not_empty
  assert $TOTAL same_as '1'
}

@test 'Command application (#check name)' {
  run rbw applications --name "an application" --json
  assert $state equals 0
  ID=`echo $output | jq '.data[0].id' -r`
  run rbw application $ID --json
  assert $state equals 0
  NAME=`echo $output | jq '.name' -r`
  assert $NAME is_not_empty
  assert $NAME same_as 'an application'
}

@test 'Command renew (#check appSecret)' {
  run rbw applications --name "an application" --json
  assert $state equals 0
  ID=`echo $output | jq '.data[0].id' -r`
  SECRET=`echo $output | jq '.data[0].appSecret' -r`
  run rbw application renew $ID --json
  assert $state equals 0
  SECRET2=`echo $output | jq '.appSecret' -r`
  assert $SECRET2 is_not_empty
  assert $SECRET2 different_to $SECRET
}

@test 'Command application set-offer (::business #check kpi)' {
  if [[ $AFTERBUILD_HOST = 'sandbox.openrainbow.com' ]]; then
    skip 'Test does not run on sandbox - application is automatically deployed'
  fi
  run rbw applications --name "an application" --json
  assert $state equals 0
  ID=`echo $output | jq '.data[0].id' -r`
  run rbw application set-offer $ID "business" --json
  assert $state equals 0
  KPI=`echo $output | jq '.kpi' -r`
  assert $KPI is_not_empty
  assert $KPI same_as 'business'
}

@test 'Command application set-redirecturi (::business #check oauthRedirectUris)' {
  run rbw applications --name "an application" --json
  assert $state equals 0
  ID=`echo $output | jq '.data[0].id' -r`
  run rbw application set-redirecturi $ID "https://myapp.domain.com/callback" --json
  assert $state equals 0
  URI=`echo $output | jq '.oauthRedirectUris[0]' -r`
  assert $URI is_not_empty
  assert $URI same_as 'https://myapp.domain.com/callback'
}

@test 'Command application set-termsurl (::business #check termsOfServiceUrl)' {
  run rbw applications --name "an application" --json
  assert $state equals 0
  ID=`echo $output | jq '.data[0].id' -r`
  run rbw application set-termsurl $ID "https://myapp.domain.com/terms.pdf" --json
  assert $state equals 0
  URL=`echo $output | jq '.termsOfServiceUrl' -r`
  assert $URL is_not_empty
  assert $URL same_as 'https://myapp.domain.com/terms.pdf'
}

@test 'Command application set-privacyurl (::business #check privacyPoliciesUrl)' {
  run rbw applications --name "an application" --json
  assert $state equals 0
  ID=`echo $output | jq '.data[0].id' -r`
  run rbw application set-privacyurl $ID "https://myapp.domain.com/privacy.pdf" --json
  assert $state equals 0
  URL=`echo $output | jq '.privacyPoliciesUrl' -r`
  assert $URL is_not_empty
  assert $URL same_as 'https://myapp.domain.com/privacy.pdf'
}

@test 'Command application set-implicitgrant (::business #check enableOAuthImplicitGrant)' {
  run rbw applications --name "an application" --json
  assert $state equals 0
  ID=`echo $output | jq '.data[0].id' -r`
  run rbw application set-implicitgrant $ID --json
  assert $state equals 0
  IMPLICITGRANT=`echo $output | jq '.enableOAuthImplicitGrant' -r`
  assert $IMPLICITGRANT is_not_empty
  assert $IMPLICITGRANT same_as 'true'
}

@test 'Command application unset-implicitgrant (::business #check enableOAuthImplicitGrant)' {
  run rbw applications --name "an application" --json
  assert $state equals 0
  ID=`echo $output | jq '.data[0].id' -r`
  run rbw application unset-implicitgrant $ID --json
  assert $state equals 0
  IMPLICITGRANT=`echo $output | jq '.enableOAuthImplicitGrant' -r`
  assert $IMPLICITGRANT is_not_empty
  assert $IMPLICITGRANT same_as 'false'
}

@test 'Command application deploy (#check env)' {
  if [[ $AFTERBUILD_HOST = 'sandbox.openrainbow.com' ]]; then
    skip 'Test does not run on sandbox - application is automatically deployed'
  fi
  run rbw applications --name "an application" --json
  assert $state equals 0
  ID=`echo $output | jq '.data[0].id' -r`
  run rbw application deploy $ID --json
  assert $state equals 0
  ENV=`echo $output | jq '.env' -r`
  assert $ENV is_not_empty
  assert $ENV same_as 'in_deployment'
}

@test 'Command application stop (#check state)' {
  if [[ $AFTERBUILD_HOST != 'sandbox.openrainbow.com' ]]; then
    skip 'Test run only on sandbox - application is not deployed'
  fi
  run rbw applications --name "an application" --json
  assert $state equals 0
  ID=`echo $output | jq '.data[0].id' -r`
  run rbw application stop $ID --json
  assert $state equals 0
  STATE=`echo $output | jq '.state' -r`
  assert $STATE is_not_empty
  assert $STATE same_as 'stopped'
}

@test 'Command application restart (#check state)' {
  if [[ $AFTERBUILD_HOST != 'sandbox.openrainbow.com' ]]; then
    skip 'Test run only on sandbox - application is not deployed'
  fi
  run rbw applications --name "an application" --json
  assert $state equals 0
  ID=`echo $output | jq '.data[0].id' -r`
  run rbw application restart $ID --json
  assert $state equals 0
  STATE=`echo $output | jq '.state' -r`
  assert $STATE is_not_empty
  assert $STATE same_as 'active'
}

@test 'Command application delete (#check operation status)' {
  run rbw applications --name "an application" --json
  assert $state equals 0
  ID=`echo $output | jq '.data[0].id' -r`
  run rbw application delete $ID --nc --json
  assert $state equals 0
}

@teardown {
  rbw logout
}